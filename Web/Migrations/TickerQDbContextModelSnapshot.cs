// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Web;

#nullable disable

namespace Web.Migrations
{
    [DbContext(typeof(TickerQDbContext))]
    partial class TickerQDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TickerQ.EntityFrameworkCore.Entities.CronTickerEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Expression")
                        .HasColumnType("text")
                        .HasColumnName("expression");

                    b.Property<string>("Function")
                        .HasColumnType("text")
                        .HasColumnName("function");

                    b.Property<string>("InitIdentifier")
                        .HasColumnType("text")
                        .HasColumnName("init_identifier");

                    b.Property<byte[]>("Request")
                        .HasColumnType("bytea")
                        .HasColumnName("request");

                    b.Property<int>("Retries")
                        .HasColumnType("integer")
                        .HasColumnName("retries");

                    b.PrimitiveCollection<int[]>("RetryIntervals")
                        .HasColumnType("integer[]")
                        .HasColumnName("retry_intervals");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_cron_tickers");

                    b.HasIndex("Expression")
                        .HasDatabaseName("IX_CronTickers_Expression");

                    b.ToTable("CronTickers", "ticker");
                });

            modelBuilder.Entity("TickerQ.EntityFrameworkCore.Entities.CronTickerOccurrenceEntity<TickerQ.EntityFrameworkCore.Entities.CronTickerEntity>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CronTickerId")
                        .HasColumnType("uuid")
                        .HasColumnName("cron_ticker_id");

                    b.Property<long>("ElapsedTime")
                        .HasColumnType("bigint")
                        .HasColumnName("elapsed_time");

                    b.Property<string>("Exception")
                        .HasColumnType("text")
                        .HasColumnName("exception");

                    b.Property<DateTime?>("ExecutedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("executed_at");

                    b.Property<DateTime>("ExecutionTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("execution_time");

                    b.Property<string>("LockHolder")
                        .HasColumnType("text")
                        .HasColumnName("lock_holder");

                    b.Property<DateTime?>("LockedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("locked_at");

                    b.Property<int>("RetryCount")
                        .HasColumnType("integer")
                        .HasColumnName("retry_count");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("pk_cron_ticker_occurrences");

                    b.HasIndex("CronTickerId")
                        .HasDatabaseName("IX_CronTickerOccurrence_CronTickerId");

                    b.HasIndex("ExecutionTime")
                        .HasDatabaseName("IX_CronTickerOccurrence_ExecutionTime");

                    b.HasIndex("CronTickerId", "ExecutionTime")
                        .IsUnique()
                        .HasDatabaseName("UQ_CronTickerId_ExecutionTime");

                    b.HasIndex("Status", "ExecutionTime")
                        .HasDatabaseName("IX_CronTickerOccurrence_Status_ExecutionTime");

                    b.ToTable("CronTickerOccurrences", "ticker");
                });

            modelBuilder.Entity("TickerQ.EntityFrameworkCore.Entities.TimeTickerEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<long>("ElapsedTime")
                        .HasColumnType("bigint")
                        .HasColumnName("elapsed_time");

                    b.Property<string>("Exception")
                        .HasColumnType("text")
                        .HasColumnName("exception");

                    b.Property<DateTime?>("ExecutedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("executed_at");

                    b.Property<DateTime>("ExecutionTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("execution_time");

                    b.Property<string>("Function")
                        .HasColumnType("text")
                        .HasColumnName("function");

                    b.Property<string>("InitIdentifier")
                        .HasColumnType("text")
                        .HasColumnName("init_identifier");

                    b.Property<string>("LockHolder")
                        .HasColumnType("text")
                        .HasColumnName("lock_holder");

                    b.Property<DateTime?>("LockedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("locked_at");

                    b.Property<byte[]>("Request")
                        .HasColumnType("bytea")
                        .HasColumnName("request");

                    b.Property<int>("Retries")
                        .HasColumnType("integer")
                        .HasColumnName("retries");

                    b.Property<int>("RetryCount")
                        .HasColumnType("integer")
                        .HasColumnName("retry_count");

                    b.PrimitiveCollection<int[]>("RetryIntervals")
                        .HasColumnType("integer[]")
                        .HasColumnName("retry_intervals");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_time_tickers");

                    b.HasIndex("ExecutionTime")
                        .HasDatabaseName("IX_TimeTicker_ExecutionTime");

                    b.HasIndex("Status", "ExecutionTime")
                        .HasDatabaseName("IX_TimeTicker_Status_ExecutionTime");

                    b.ToTable("TimeTickers", "ticker");
                });

            modelBuilder.Entity("TickerQ.Utilities.Models.Ticker.TimeTicker", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<long>("ElapsedTime")
                        .HasColumnType("bigint")
                        .HasColumnName("elapsed_time");

                    b.Property<string>("Exception")
                        .HasColumnType("text")
                        .HasColumnName("exception");

                    b.Property<DateTime?>("ExecutedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("executed_at");

                    b.Property<DateTime>("ExecutionTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("execution_time");

                    b.Property<string>("Function")
                        .HasColumnType("text")
                        .HasColumnName("function");

                    b.Property<string>("InitIdentifier")
                        .HasColumnType("text")
                        .HasColumnName("init_identifier");

                    b.Property<string>("LockHolder")
                        .HasColumnType("text")
                        .HasColumnName("lock_holder");

                    b.Property<DateTime?>("LockedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("locked_at");

                    b.Property<byte[]>("Request")
                        .HasColumnType("bytea")
                        .HasColumnName("request");

                    b.Property<int>("Retries")
                        .HasColumnType("integer")
                        .HasColumnName("retries");

                    b.Property<int>("RetryCount")
                        .HasColumnType("integer")
                        .HasColumnName("retry_count");

                    b.PrimitiveCollection<int[]>("RetryIntervals")
                        .HasColumnType("integer[]")
                        .HasColumnName("retry_intervals");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_time_tickers");

                    b.ToTable("time_tickers", (string)null);
                });

            modelBuilder.Entity("Web.TickerExecution", b =>
                {
                    b.Property<Guid>("TickerId")
                        .HasColumnType("uuid")
                        .HasColumnName("ticker_id");

                    b.Property<string>("ExecutedBy")
                        .HasColumnType("text")
                        .HasColumnName("executed_by");

                    b.Property<DateTime>("ExecutedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("executed_at");

                    b.HasKey("TickerId", "ExecutedBy")
                        .HasName("pk_ticker_executions");

                    b.ToTable("ticker_executions", (string)null);
                });

            modelBuilder.Entity("TickerQ.EntityFrameworkCore.Entities.CronTickerOccurrenceEntity<TickerQ.EntityFrameworkCore.Entities.CronTickerEntity>", b =>
                {
                    b.HasOne("TickerQ.EntityFrameworkCore.Entities.CronTickerEntity", "CronTicker")
                        .WithMany()
                        .HasForeignKey("CronTickerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_cron_ticker_occurrences_cron_tickers_cron_ticker_id");

                    b.Navigation("CronTicker");
                });
#pragma warning restore 612, 618
        }
    }
}
